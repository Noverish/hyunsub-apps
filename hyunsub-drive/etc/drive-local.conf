server {
  listen 80;
  server_name local-drive.hyunsub.kim;

  location / {
    return 301 https://$server_name$request_uri;
  }
}

server {
  listen 443 ssl;
  server_name local-drive.hyunsub.kim;
  error_page 401 /unauthorized;
  client_max_body_size 16M;

  ssl_certificate     /etc/nginx/cert/hyunsub.fullchain.pem;
  ssl_certificate_key /etc/nginx/cert/hyunsub.privkey.pem;

  ## WEB ================================
  location ~* \.(ico|css|js|map|json|png)$ {
    proxy_pass http://host.docker.internal:3000;
    access_log off;
  }

  location / {
    auth_request /auth;
    auth_request_set $x_redirect_url $upstream_http_x_redirect_url;

    proxy_pass http://host.docker.internal:3000;
  }
  ## ================================

  ## API ================================
  location /api {
    auth_request /auth;
    auth_request_set $x_auth_failed $upstream_http_x_auth_failed;
    auth_request_set $x_hyunsub_auth $upstream_http_x_hyunsub_auth;

    proxy_pass http://host.docker.internal:7006;
    proxy_set_header X-Hyunsub-Auth $x_hyunsub_auth;
    proxy_set_header X-Original-IP $remote_addr;
    proxy_set_header X-Original-URL $scheme://$http_host$request_uri$is_args$args;
  }

  location = /health-check {
    proxy_pass http://host.docker.internal:7006;
    proxy_set_header X-Original-IP $remote_addr;
  }
  ## ================================

  ## AUTH ================================
  location = /auth {
    internal;
    proxy_pass https://auth.hyunsub.kim/api/v1/nginx/auth;
    proxy_pass_request_body off;
    proxy_set_header Content-Length '';
    proxy_set_header X-Original-IP $remote_addr;
    proxy_set_header X-Original-URL $scheme://$http_host$request_uri$is_args$args;
  }

  location /unauthorized {
    default_type 'application/json';
    internal;

    if ($x_redirect_url) {
      return 307 $x_redirect_url;
    }
    if ($x_auth_failed) {
      return 401 $x_auth_failed;
    }
    return 500 'unexpected nginx error';
  }
  ## ================================

  # for react dev
  location ~ ^/(ws|sockjs-node) {
    access_log off;
    proxy_pass http://host.docker.internal:3000;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
  }
}
